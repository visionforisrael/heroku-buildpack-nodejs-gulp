#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
VENDOR_DIR="$BUILD_DIR/vendor2" #cached vendor dir

mkdir -p "$BUILD_DIR/.heroku/node/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | indent
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment"
create_env # can't indent the whole thing because piping causes subshells; no exporting possible
list_node_config | indent

install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
    echo "Using bundled npm version for iojs compatibility: `npm --version`"
  else
    warn_node_engine "$node_engine"
    install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
    install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  fi
  warn_old_npm


  ##if [ -d $CACHE_DIR/node/vendor/nasm ]; then
  #  echo "Copying nasm from cache"
  #  cp -r $CACHE_DIR/node/vendor/nasm $VENDOR_DIR
  # else
  #  echo "Installing nasm from source"
  #  NVERSION="2.11"
  #  curl http://www.nasm.us/pub/nasm/releasebuilds/$NVERSION/nasm-$NVERSION.tar.gz -s | tar xz
  #  cd nasm-$NVERSION
  #  ./configure >/dev/null 2>&1 && make >/dev/null 2>&1
  #
  #  mkdir -p $VENDOR_DIR/nasm/bin
  #  mv nasm $VENDOR_DIR/nasm/bin
  #  chmod +x $VENDOR_DIR/nasm/bin/*
  #fi
  #PATH=$PATH:$VENDOR_DIR/nasm/bin

}

header "Installing binaries"
install_bins | indent

restore_cache() {
  local cache_status="$(get_cache_status)"

  if [ "$cache_status" == "valid" ]; then
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "Loading 1 from cacheDirectories (default):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
    else
      echo "Loading $(echo $cache_directories | wc -w | xargs) from cacheDirectories (package.json):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
    fi
  else
    echo "Skipping cache ($cache_status)"
  fi
}

header "Restoring cache"
restore_cache | indent

build_dependencies() {
  if $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    rebuild_node_modules "$BUILD_DIR"
  else
    install_node_modules "$BUILD_DIR"
  fi
}

header "Building dependencies"
build_dependencies | indent

# If Procfile is absent, try to create one using `npm start`
if [ ! -e $BUILD_DIR/Procfile ]; then
  npm_start=$(read_json "$BUILD_DIR/package.json" ".scripts.start")

  # If `scripts.start` is set in package.json, or a server.js file
  # is present in the app root, then create a default Procfile
  if [ "$npm_start" != "null" ]; then
    status "No Procfile found; Adding 'npm start' to new Procfile"
    echo "web: npm start" > $BUILD_DIR/Procfile
  elif  [ -f $BUILD_DIR/server.js ]; then
    status "No Procfile found; Adding 'node server.js' to new Procfile"
    echo "web: node server.js" > $BUILD_DIR/Procfile
  elif  [ -f $BUILD_DIR/app.js ]; then
    status "No Procfile found; Adding 'node app.js' to new Procfile"
    echo "web: node app.js" > $BUILD_DIR/Procfile
  else
    status "Procfile not found and npm start script is undefined"
    protip "Create a Procfile or specify a start script in package.json"
  fi
fi

# Check and run gulp
if [ -f $BUILD_DIR/gulpfile.js ] || [ -f $BUILD_DIR/Gulpfile.js ]; then
#  # get the env vars
#  if [ -d "$ENV_DIR" ]; then
#    status "Exporting config vars to environment"
#    export_env_dir $ENV_DIR
#  fi
  header "Gulpfile found"
  # Install gulp locally
  echo "Updating gulp locally"
  if [ -e node_modules/.bin/gulp ]; then
    npm update gulp 2>&1 | indent
  else
    npm install gulp 2>&1 | indent
  fi

  if [ ! -z "${GULP_TASK:-}" ]; then
    echo "Found GULP_TASK, running 'gulp $GULP_TASK'"
    $BUILD_DIR/node_modules/.bin/gulp $GULP_TASK
  else
    echo "No GULP_TASK found, running 'gulp build'"
    $BUILD_DIR/node_modules/.bin/gulp build
  fi
else
  header "No gulpfile found"
fi

cache_build() {
  local cache_directories=$(get_cache_directories)
  
  echo "Clearing previous node cache"
  clear_cache
  if [ "$cache_directories" == "" ]; then
    echo "Saving 1 cacheDirectories (default):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
  else
    echo "Saving $(echo $cache_directories | wc -w | xargs) cacheDirectories (package.json):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
  fi
  save_signature
}

header "Caching build"
cache_build | indent

summarize_build() {
  cd $BUILD_DIR
  (npm ls --depth=0 | tail -n +2 || true) 2>/dev/null
}

header "Build succeeded!"
summarize_build | indent
